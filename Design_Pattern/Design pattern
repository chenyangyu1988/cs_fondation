Hey My change is here

Types of Design Patterns

Pattern & Description

1. Creational Patterns
• These design patterns provides way to create objects while hiding the creation logic, rather than instantiating objects directly using new opreator. This gives program more flexibility in deciding which objects need to be created for a given use case.
• 不用new来创建object, 而是提供了一个method来让program生成method

2. Structural Patterns
• These design patterns concern class and object composition. Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities.
• 结合不同的object, 有新的functionality

3. Behavioral Patterns
• These design patterns are specifically concerned with communication between objects.
4. J2EE Patterns
• These design patterns are specifically concerned with the presentation tier. These patterns are identified by Sun Java Center.



Design Patterns

A: Creational Patterns

1. Factory Pattern (JDBC, ThreadPool)
• In Factory pattern, we create object without exposing the creation logic to the client and refer to newly created object using a common interface.
• 用一个interface, 将要生成什么object传入, 返回object

1) Factory 有一个method去生成object
2) 所有由Factory生成的object implement同一个接口

• Advantage: The factory decouples the calling class from the target class. A perfect example of why this is good is JDBC. The application code doesn't need to know what database it will be used with, so it doesn't know what database-specific driver classes it should use. Instead, it uses factory methods to get Connections, Statements, and other objects to work with. The application code only knows that the Connection object implements the Connection interface: it doesn't need to know the name of the concrete class that implements it

2. Abstract Factory Pattern
• In Abstract Factory pattern an interface is responsible for creating a factory of related objects, without explicitly specifying their classes. Each generated factory can give the objects as per the Factory pattern
• FactoryProducer => Factory => Object

3. Singleton Pattern (Web Server)
• This pattern involves a single class which is responsible to creates own object while making sure that only single object get created. This class provides a way to access its only object which can be accessed directly without need to instantiate the object of the class

1) getInstance() to get the instance of this object
2) private constructor and initialize the instance when start

4. Builder Pattern
• A Builder class builds the final object step by step. This builder is independent of other objects.
• 一个object包含另外一个object, 最终构成结果

5. Prototype Pattern (Query Database)
• This pattern involves implementing a prototype interface which tells to create a clone of the current object. This pattern is used when creation of object directly is costly. For example, a object is to be created after a costly database operation. We can cache the object, returns its clone on next request and update the database as as and when needed thus reducing database calls
• 创建一个clone的object, 比如创建此object需要database query

1) 一个hashmap来保存所有创建的object
2) 一个method去返回创建的object的clone



B: Structural Pattern

1. Adaptor Pattern
• This pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces. A real life example could be a case of card reader which acts as an adapter between memory card and a laptop. You plugins the memory card into card reader and card reader into the laptop so that memory card can be read via laptop
• 两个不兼容的object(一个是低级的, 一个是高级的), 要让低级的兼容高级的, 有一个adaptor(包含高级的object), 在低级的里面加入这个adaptor field

1）adaptor implement 一个基础的interface
2) 在里面创建另外一个object, 用这个object来扩展新的功能

2. ****Bridge Pattern
• This pattern involves an interface which acts as a bridge which makes the functionality of concrete classes independent from interface implementer classes. Both types of classes can be altered structurally without affecting each other.
• 两个object分别有不同的method, 用一个bridge来使一个object可以用另一个object的方法来实现

1) bridge interface 去定义一个method来完成一件事情
2) concrete object会调用bridge的实现类来完成某项任务 (这样就实现了方法上的独立)


3. Decorator Pattern
• This pattern creates a decorator class which wraps the original class and provides additional functionality keeping class methods signature intact

1） 创建一个abstract class去
2) 用这个abstract class来扩展interface的值

4. ***** Composite Pattern (Json format, SectionGroup)
• Composite pattern is used where we need to treat a group of objects in similar way as a single object. Composite pattern composes objects in term of a tree structure to represent part as well as whole hierarchy . This type of design pattern comes under structural pattern as this pattern creates a tree structure of group of objects.
• 自己包含自己 (比如yahoo的SectionGroup)

5. Filter Pattern
• Filter pattern or Criteria pattern is a design pattern that enables developers to filter a set of objects, using different criteria, chaining them in a decoupled way through logical operations

• 一个interface 来定义filter的内容

This pattern creates a class contains group of its own objects. This class provides ways to modify its group of same objects.


6. Flyweight Pattern
• Flyweight pattern is primarily used to reduce the number of objects created, to decrease memory footprint and increase performance
, Flyweight pattern try to reuse already existing similar kind objects by storing them and creates new object when no matching object is found

1) 一个factory pattern来用一个hash map保存创建过的object
2) 如果有这个object, 就不创建新的了

7. ******Facade Pattern
• hides the complexities of the system and provides an interface to the client using which the client can access the system. This type of design pattern comes under structural pattern as this pattern adds an interface to exiting system to hide its complexities. This pattern involves a single class which provides simplified methods which are required by client and delegates calls to existing system classes methods.
• facade object里面调用别的object来提供给用户功能



10. Strategy Pattern (类似command)
• In Strategy pattern, we create objects which represent various strategies and a context object whose behavior varies as per its strategy object. The strategy object changes the executing algorithm of the context object

1) 有一个interface, 许多不同的strategy来实现不同的功能
2) 有一个server, 通过interface来实现不同功能

11. *********** Template Pattern
•  an abstract class exposes defined way(s)/template(s) to execute its methods. Its subclasses can overrides the method implementations as per need basis but the invocation is to be in the same way as defined by an abstract class.

1) 一个abstract class定义了一个方法实现的顺序, 其他class重写这些方法, 但实现顺序不变

12. Visitor Pattern
• n Visitor pattern, we use a visitor class which changes the executing algorithm of an element class. By this way, execution algorithm of element can varies as visitor varies. This pattern comes under behavior pattern category. As per the pattern, element object has to accept the visitor object so that visitor object handles the operation on the element object




