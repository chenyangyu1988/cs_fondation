Java Concurrency 

1. Concurrency vs Parallel

1) Parallel 
processes—two or more Threads are running simultaneously, on different cores (processors), in the same computer

2) Concurrent 
processes—two or more Threads are running asynchronously, on different cores (processors), in the same computer

• Asynchronous means that you cannot tell whether operation A in Thread #1 happens before, during, or after operation B in Thread #2
• Asynchronous processes may be running simultaneously, on different cores, or they may be sharing time on the same core



Introduction

1.2 Benefits of Threads

1.2.1 Exploiting multiple processors

• Single Thread => only run on at most one processor => Multiple processor => multi-thread

• Thread execution may be block (synchronous) => thread switch

1.2.2 Simplicity of Modeling

• a program that processes one type of task sequentially is simpler to write, less errorͲ
prone, and easier to test than one managing multiple different types of tasks at once

1.2.3 Simplified Handling of Asynchronous Events

• A server application that accepts socket connections from multiple remote clients may be easier to develop when each
connection is allocated its own thread and allowed to use synchronous I/O.


1.3 Risks of Threads

1.3.1 Safety Hazards

• the ordering of operations in multiple threads is unpredictable and sometimes surprising

• Race Condition: use synchronization mechanisms to coordinate

1.3.2 Liveness Hazards

• A liveness failure occurs when an activity gets into a state such that it is permanently unable to
make forward progress

• Deadlock, startvation, livelock

1.3.3 Performance Hazards

• Performance issues subsume a broad range of problems, including poor service time, responsiveness, throughput, resource consumption, or scalability.


Chapter 2. Thread Safety

2.0.0 multiple threads access the same mutable state variable without appropriate synchronization. Three ways to fix it
• Don't share the state variable across threads
• Make the state variable immutable (不可变)
• Use synchronization whenever accessing the state variable(都要访问并且可write的)

2.0.1 When designing threadͲsafe classes, good objectͲoriented techniques Ͳ encapsulation, immutability, and clear
specification of invariantsͲare your best friends.

2.1 Thread Safety

• A class is threadͲsafe if it behaves correctly when accessed from multiple threads, regardless of the scheduling or
interleaving of the execution of those threads by th
 
2.1.1 Stateless objects are always threadͲsafe (don't have state shared by threads)

2.2 Atomicity 

• ***race condition: the correctness of a computation depends on the relative timing or interleaving of multiple threads by the runtime

2.2.1 lazy initializtion are thread unsafe

Operations A and B are atomic with respect to each other if, from the perspective of a thread executing A, when
another thread executes B, either all of B has executed or none of it has.

2.2.2 Compound Actions (atomic)

• Where practical, use existing threadͲsafe objects, like AtomicLong, to manage your class's state. It is simpler to reason
about the possible states and state transitions for existing threadͲsafe objects than it is for arbitrary state variables, and
this makes it easier to maintain and verify thread safety.

2.3 Locks

2.3.1 Intrinsic Locks

• synchronized lock
Every Java object can implicitly act as a lock for purposes of synchronization; these builtͲin locks are called intrinsic locks or monitor locks

2.3.2. Reentrancy

Reentrancy means that locks are acquired on a perͲthread rather than perͲinvocation basis

2.4. Guarding State with Locks

• For each mutable state variable that may be accessed by more than one thread, all accesses to that variable must be
performed with the same lock held. In this case, we say that the variable is guarded by that lock.

• Every shared, mutable variable should be guarded by exactly one lock. Make it clear to maintainers which lock that is.

• For every invariant that involves more than one variable, all the variables involved in that invariant must be guarded by the same lock