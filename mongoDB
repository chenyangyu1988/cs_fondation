Getting Started with mongoDB

1. Connect to a Database 
• mongod : open mongodb
• mongo: connect to a mongodb
• db: see current database
• show dbs: show all the databases
• use mydb: switch to a new db
• show collections:  Print a list of all collections(tables) for current database

2. Create a collection and Insert Documents

/***********************************************************************************************/

MongoDB CRUD Introductions

1. Basic

1) • Documents 
	MongoDB stores data in the form of documents, which are BSON (JSON-like) field and value pairs.
   	BSON is a binary representation of JSON with additional type information

   • Collections (like table) 
   	MongoDB stores all documents in collections. A collection is a group of related documents that have a set of shared common indexes


2) Database Operations
• create documents
 j = { name : "mongo" }
 k = { x : 3 }

• insert (testData is collection)
 db.testData.insert( j )
 db.testData.insert( k )

• show collections

• find
 db.testData.find() <== find all data

 3) Working with cursor: When you query a collection, MongoDB returns a “cursor” object that contains the results of the query. 
 The mongo shell then iterates over the cursor to display the results

• var c = db.testData.find()
  while ( c.hasNext() ) printjson( c.next() )

• var c = db.testData.find()
  printjson( c [ 4 ] )
  When you access documents in a cursor using the array index notation, mongo first calls the cursor.toArray() method and loads into RAM all documents returned by the cursor. The index is then applied to the resulting array. This operation iterates the cursor completely and exhausts the cursor.

• Query for specific Documents
   db.testData.find( { x : 18 } )
   db.testData.findOne()
   db.testData.find().limit(3)


2. Database Operations

1) Query: In MongoDB a query targets a specific collection of documents. Queries specify criteria, or conditions, that identify the documents that MongoDB returns to the clients

• include projection (specify the fields from the matching documents), limits, skips, sort orders

2) Data Modifiction

/***********************************************************************************************/

MongoDB CRUD Concepts

1. Read Operation Overview

• Read operations, or queries, retrieve data stored in the database. In MongoDB, queries select documents from a single collection

• Queries specify criteria, or conditions, that identify the documents that MongoDB returns to the clients. A query may include a projection that specifies the fields from the matching documents to return. The projection limits the amount of data that MongoDB returns to the client over the network.

1) Query Interface

• Method:  db.collection.find()  ==> first do where then do projection

• db.users.find(                  <==  from (collection)
  { age: { $gt : 18 } },          <==  where (query criteria)
  { name : 1, address: 1}         <==  select (projection)
  ).limit(5)

2) Query Behaviour
 - All queries in MongoDB address a single collection.
 - You can modify the query to impose limits, skips, and sort orders.
 - The order of documents returned by a query is not defined unless you specify a sort().
 - Operations that modify existing documents (i.e. updates) use the same query syntax as queries to select documents to update.
 - In aggregation pipeline, the $match pipeline stage provides access to MongoDB queries.

3) Projections

• Queries in MongoDB return all fields in all matching documents by default. To limit the amount of data that MongoDB sends to applications, include a projection in the queries

• 0: exclude, 1: include

4) Project Behaviour
• By default, the _id field is included in the results. To suppress the _id field from the result set, specify _id: 0 in the projection document.
• For fields that contain arrays, MongoDB provides the following projection operators: $elemMatch, $slice, and $. (return )
 - http://docs.mongodb.org/manual/reference/operator/projection/elemMatch/#proj._S_elemMatch (return element in array match)
  db.schools.find( { zipcode: "63109" },
                 { students: { $elemMatch: { school: 102 } } } )
  db.students.find(
   { "grades.mean": { $gt: 70 } },
   { "grades.$": 1 }
  )
 - http://docs.mongodb.org/manual/reference/operator/projection/positional/#proj._S_ (return first match in array)
• For related projection functionality in the aggregation framework pipeline, use the $project pipeline stage.

2. Cursors

• the primary method for the read operation is the db.collection.find() method. This method queries a collection and returns a cursor to the returning documents.

1) Cursor Behaviour

• var myCursor = db.inventory.find().addOption(DBQuery.Option.noTimeout); => set cursor no timeout

• Cursor Isolation: Because the cursor is not isolated during its lifetime, intervening write operations on a document may result in a cursor that returns a document more than once if that document has changed.

• Cursor Batches
 - The MongoDB server returns the query results in batches.
 - cursor.next() will perform a getmore operation to retrieve the next batch
 - To see how many documents remain in the batch as you iterate the cursor, you can use the objsLeftInBatch() method

2) Cursor Infomation 

• The db.serverStatus() method returns a document that includes a metrics field. The metrics field contains a cursor field with the following information:

/***********************************************************************************************/

Query Optimization

1) Create an Index to Support Read Operation

• If your application queries a collection on a particular field or set of fields, then an index on the queried field or fields can prevent the query from scanning the whole collection to find and return the query results. 

• Create Index: db.inventory.ensureIndex( { type: 1 } )

2) Performance

• Because the index contains all fields required by the query, MongoDB can both match the query conditions and return the results using only the index

• Querying only the index can be much faster than querying documents outside of the index. Index keys are typically smaller than the documents they catalog, and indexes are typically available in RAM or located sequentially on disk.

3) Limitation

• any of the indexed fields in any of the documents in the collection includes an array. If an indexed field is an array, the index becomes a multi-key index index and cannot support a covered query

• any of the returned indexed fields are fields in subdocuments. [2] For example, consider a collection users with documents of the following form:

/***********************************************************************************************/

Distributed Queries

1) Read Operations to sharded clusters

• Sharded clusters allow you to partition a data set among a cluster of mongod instances in a way that is nearly transparent to the application

• Read operations on sharded clusters are most efficient when directed to a specific shard. Queries to sharded collections should include the collection’s shard key

• If a query does not include the shard key, the mongos must direct the query to all shards in the cluster. These scatter gather queries can be inefficient

2) Read Operations to Replica Sets

• Replica sets use read preferences to determine where and how to route read operations to members of the replica set. By default, MongoDB always reads data from a replica set’s primary.

• Read operations from secondary members of replica sets are not guaranteed to reflect the current state of the primary, and the state of secondaries will trail the primary by some amount of time

/***********************************************************************************************/

Write Operations Overview

• A write operation is any operation that creates or modifies data in the MongoDB instance. In MongoDB, write operations target a single collection

1) Insert

• Method: db.collection.insert() 
 - EX: db.users.insert(
   {
      name: "sue",
      age: 26,
      status: "A"
   }
)

• Insert Behavior
If you add a new document without the _id field, the client library or the mongod instance adds an _id field and populates the field with a unique ObjectId.

2) Update 

• Method: db.collection.update()

• Operations performed by an update are atomic within a single document. For example, you can safely use the $inc and $mul operators to modify frequently-changed fields in concurrent applications.

• db.users.update(
   { age: { $gt: 18 } },          <==  where
   { $set: { status: "A" } },     <==  set
   { multi: true }
)

• default update behaviour
  - the db.collection.update() method updates a single document. However, with the multi option, update() can update all documents in a collection that match a query
  - MongoDB preserves the order of the document fields following write operations except for the following cases:
    The _id field is always the first field in the document.
    Updates that include renaming of field names may result in the reordering of fields in the document.

• upsert: if no one update, then use insert

3) Remove

• db.collection.remove(): deletes documents from a collection

4) Isolation write Operations:    

• The modification of a single document is always atomic

• For write operations that modify multiple documents, the operation as a whole is not atomic, and other operations may interleave

/***********************************************************************************************/

Write Concern

1. Read Isolation (Read uncommitted)

• For systems with multiple concurrent readers and writers, MongoDB will allow clients to read the results of a write operation before the write operation returns.
• If the mongod terminates before the journal commits, even if a write returns successfully, queries may have read data that will not exist after the mongod restarts.

2. Write Concern levels

• unacknowledged: MongoDB does not acknowledge the receipt of write operations

• acknowledged: mongod confirms that it received the write operation and applied the change to the in-memory view of data

• journaled: the MongoDB acknowledges the write operation only after committing the data to the journal

• Replica acknowledged: Replica sets present additional considerations with regards to write concern.. The default write concern only requires acknowledgement from the primary.

/***********************************************************************************************/

Insert Documents

1. Insert a document into a collection

db.inventory.insert(
   {
     item: "ABC1",
     details: {
        model: "14Q3",
        manufacturer: "XYZ Company"
     },
     stock: [ { size: "S", qty: 25 }, { size: "M", qty: 50 } ],
     category: "clothing"
   }
)

2. Insert Array of Documents

var mydocuments =
    [
      {
        item: "ABC2",
        details: { model: "14Q3", manufacturer: "M1 Corporation" },
        stock: [ { size: "M", qty: 50 } ],
        category: "clothing"
      },
      {
        item: "MNO2",
        details: { model: "14Q3", manufacturer: "ABC Company" },
        stock: [ { size: "S", qty: 5 }, { size: "M", qty: 5 }, { size: "L", qty: 1 } ],
        category: "clothing"
      },
      {
        item: "IJK2",
        details: { model: "14Q2", manufacturer: "M5 Corporation" },
        stock: [ { size: "S", qty: 5 }, { size: "L", qty: 1 } ],
        category: "houseware"
      }
    ];

db.inventory.insert( mydocuments );

3. Bulk

var bulk = db.inventory.initializeUnorderedBulkOp();

bulk.insert(
   {
     item: "BE10",
     details: { model: "14Q2", manufacturer: "XYZ Company" },
     stock: [ { size: "L", qty: 5 } ],
     category: "clothing"
   }
);
bulk.insert(
   {
     item: "ZYT1",
     details: { model: "14Q1", manufacturer: "ABC Company"  },
     stock: [ { size: "S", qty: 5 }, { size: "M", qty: 5 } ],
     category: "houseware"
   }
);

bulk.execute();

/***********************************************************************************************/

Query Documents

1. Specify Equality Condition (where a= b)

db.inventory.find( { type: "snacks" } )

2. Specify Conditions Using Query Operators (where a in [array])

db.inventory.find( { type: { $in: [ 'food', 'snacks' ] } } )

3. Specify And conditions (where a and b)

db.inventory.find( { type: 'food', price: { $lt: 9.95 } } )

4. Specify Or conditions

db.inventory.find(
   {
     $or: [ { qty: { $gt: 100 } }, { price: { $lt: 9.95 } } ]
   }
)

5. Embedded Documents

1) Exact Match on the Embedded Document

db.inventory.find(
    {
      producer:
        {
          company: 'ABC123',
          address: '123 Street'
        }
    }
)

2) Equality Match on Fields within an Embedded Document

db.inventory.find( { 'producer.company': 'ABC123' } )

6. Arrays

1) When the field holds an array, you can query for an exact array match or for specific values in the array. If the array holds embedded documents, you can query for specific fields in the embedded documents using dot notation

2) db.inventory.find( { ratings: [ 5, 8, 9 ] } )
   db.inventory.find( { ratings: 5 } )
   db.inventory.find( { 'ratings.0': 5 } )

3) Specify Multiple Criteria for Array Elements

• Single element satisfy
db.inventory.find( { ratings: { $elemMatch: { $gt: 5, $lt: 9 } } } )

• have element statisfy

db.inventory.find( { ratings: { $gt: 5, $lt: 9 } } )


/***********************************************************************************************/

MongoDB Basic commands

1. Use Database Commands

1) Database Command Form

• specify the isMaster command
 - { isMaster: 1 }

• Issue commands
 - db.runCommand( { isMaster: 1 } )

2) admin Database Commands

• use admin
db.runCommand( {buildInfo: 1} )

• db._adminCommand( {buildInfo: 1} )

should response at least {'ok', 1}

2. 